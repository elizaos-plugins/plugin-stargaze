{"version":3,"sources":["../src/actions/getLatestNFT.ts","../src/environment.ts","../src/utils/debug.ts","../src/actions/getCollectionStats.ts","../src/actions/getTokenSales.ts","../src/index.ts"],"sourcesContent":["import {\n    ActionExample,\n    composeContext,\n    Content,\n    elizaLogger,\n    generateObjectDeprecated,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    type Action,\n} from \"@elizaos/core\";\nimport axios from \"axios\";\nimport { validateStargazeConfig } from \"../environment\";\nimport { debugLog } from \"../utils/debug\";\n\nexport interface GetLatestNFTContent extends Content {\n    collectionAddr: string;\n    limit: number;\n}\n\nconst getLatestNFTTemplate = `Given the message, extract information about the NFT collection request.\n\nFormat the response as a JSON object with these fields:\n- collectionAddr: the collection address or name\n- limit: number of NFTs to fetch (default to 1 for latest)\n\nExample response:\nFor \"Show me the latest NFT from ammelia\":\n\\`\\`\\`json\n{\n    \"collectionAddr\": \"ammelia\",\n    \"limit\": 1\n}\n\\`\\`\\`\n\nFor \"Show me the latest NFT from Badkids\":\n\\`\\`\\`json\n{\n    \"collectionAddr\": \"badkids\",\n    \"limit\": 1\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the collection information from the above messages and respond with the appropriate JSON.`;\n\n\nconst GRAPHQL_QUERY = `\nquery MarketplaceTokens($collectionAddr: String!, $limit: Int) {\n    tokens(\n        collectionAddr: $collectionAddr\n        limit: $limit\n        sortBy: MINTED_DESC\n    ) {\n        tokens {\n            id\n            tokenId\n            name\n            media {\n                url\n            }\n            listPrice {\n                amount\n                symbol\n            }\n        }\n        pageInfo {\n            total\n            offset\n            limit\n        }\n    }\n}`;\n\nexport default {\n    name: \"GET_LATEST_NFT\",\n    similes: [\"SHOW_LATEST_NFT\", \"FETCH_LATEST_NFT\"],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.log(\"üîÑ Validating Stargaze configuration...\");\n        try {\n            const config = await validateStargazeConfig(runtime);\n            debugLog.validation(config);\n            return true;\n        } catch (error) {\n            debugLog.error(error);\n            return false;\n        }\n    },\n    description: \"Get the latest NFT from a Stargaze collection\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"üöÄ Starting Stargaze GET_LATEST_NFT handler...\");\n\n        if (!state) {\n            elizaLogger.log(\"Creating new state...\");\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            elizaLogger.log(\"Updating existing state...\");\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        try {\n            elizaLogger.log(\"Composing NFT context...\");\n            const nftContext = composeContext({\n                state,\n                template: getLatestNFTTemplate,\n            });\n\n            elizaLogger.log(\"Generating content from context...\");\n            const content = (await generateObjectDeprecated({\n                runtime,\n                context: nftContext,\n                modelClass: ModelClass.LARGE,\n            })) as unknown as GetLatestNFTContent;\n\n            if (!content || !content.collectionAddr) {\n                throw new Error(\"Invalid or missing collection address in parsed content\");\n            }\n\n            debugLog.validation(content);\n\n            const config = await validateStargazeConfig(runtime);\n\n            const requestData = {\n                query: GRAPHQL_QUERY,\n                variables: {\n                    collectionAddr: content.collectionAddr,\n                    limit: content.limit || 1,\n                },\n            };\n\n            debugLog.request('POST', config.STARGAZE_ENDPOINT, requestData);\n\n            const response = await axios.post(\n                config.STARGAZE_ENDPOINT,\n                requestData,\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                    }\n                }\n            );\n\n            debugLog.response(response);\n\n            if (!response.data?.data?.tokens?.tokens) {\n                throw new Error(\"Unexpected API response structure\");\n            }\n\n            const latestNFT = response.data.data.tokens.tokens[0];\n            if (!latestNFT) {\n                throw new Error(`No NFTs found in collection: ${content.collectionAddr}`);\n            }\n\n            if (callback) {\n                const message = {\n                    text: `Latest NFT from ${content.collectionAddr}:\\nName: ${latestNFT.name}\\nToken ID: ${latestNFT.tokenId}\\nImage: ${latestNFT.media.url}`,\n                    content: latestNFT,\n                };\n                elizaLogger.log(\"‚úÖ Sending callback with NFT data:\", message);\n                callback(message);\n            }\n\n            return true;\n        } catch (error) {\n            debugLog.error(error);\n            if (callback) {\n                callback({\n                    text: `Error fetching collection stats: ${error}`,\n                    content: { error: error },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Show me the latest NFT from ammelia collection\",\n                },\n            },\n\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"whats the latest mint for badkids in stargaze?\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll fetch the latest NFT from the ammelia collection.\",\n                    action: \"GET_LATEST_NFT\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Here's the latest NFT: {{dynamic}}\",\n                },\n            },\n        ],\n    ],\n} as Action;","import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const stargazeEnvSchema = z.object({\n    STARGAZE_ENDPOINT: z.string().min(1, \"Stargaze API endpoint is required\"),\n});\n\nexport type StargazeConfig = z.infer<typeof stargazeEnvSchema>;\n\nexport async function validateStargazeConfig(\n    runtime: IAgentRuntime\n): Promise<StargazeConfig> {\n    try {\n        const config = {\n            STARGAZE_ENDPOINT: runtime.getSetting(\"STARGAZE_ENDPOINT\"),\n        };\n        return stargazeEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Stargaze configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}","import { elizaLogger } from \"@elizaos/core\";\n\nexport const debugLog = {\n    request: (method: string, url: string, data?: any) => {\n        elizaLogger.log(\"üåê API Request:\", {\n            method,\n            url,\n            data: data || \"No data\"\n        });\n    },\n\n    response: (response: any) => {\n        elizaLogger.log(\"‚úÖ API Response:\", {\n            status: response?.status,\n            data: response?.data || \"No data\"\n        });\n    },\n\n    error: (error: any) => {\n        elizaLogger.error(\"‚õî Error Details:\", {\n            message: error?.message,\n            response: {\n                status: error?.response?.status,\n                data: error?.response?.data\n            },\n            config: {\n                url: error?.config?.url,\n                method: error?.config?.method,\n                data: error?.config?.data\n            }\n        });\n    },\n\n    validation: (config: any) => {\n        elizaLogger.log(\"üîç Config Validation:\", config);\n    }\n};","import {\n    ActionExample,\n    composeContext,\n    Content,\n    elizaLogger,\n    generateObjectDeprecated,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    type Action,\n} from \"@elizaos/core\";\nimport axios from \"axios\";\nimport { validateStargazeConfig } from \"../environment\";\nimport { debugLog } from \"../utils/debug\";\n\nexport interface GetCollectionStatsContent extends Content {\n    collectionAddr: string;\n}\n\nconst COLLECTION_STATS_QUERY = `\nquery CollectionStats($collectionAddr: String!) {\n    collection(address: $collectionAddr) {\n        contractAddress\n        name\n        stats {\n            numOwners\n            bestOffer\n            volumeTotal\n            volume24Hour\n            salesCountTotal\n            tokensMintedPercent\n            uniqueOwnerPercent\n            change24HourPercent\n            marketCap\n            mintCount24hour\n            mintVolume24hour\n            volumeUsdTotal\n            volumeUsd24hour\n        }\n    }\n}`;\n\n// Add template for content generation\nconst getCollectionStatsTemplate = `Given the message, extract the collection address for fetching Stargaze stats.\n\nFormat the response as a JSON object with this field:\n- collectionAddr: the collection address or name (required)\n\nExample response for \"Show me stats for ammelia collection\":\n\\`\\`\\`json\n{\n    \"collectionAddr\": \"ammelia\"\n}\n\\`\\`\\`\n\nExample response for \"Show me stats for stars10n0m58ztlr9wvwkgjuek2m2k0dn5pgrhfw9eahg9p8e5qtvn964suc995j collection\":\n\\`\\`\\`json\n{\n    \"collectionAddr\": \"stars10n0m58ztlr9wvwkgjuek2m2k0dn5pgrhfw9eahg9p8e5qtvn964suc995j\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the collection address from the above messages and respond with the appropriate JSON.`;\n\nexport default {\n    name: \"GET_COLLECTION_STATS\",\n    similes: [\"CHECK_COLLECTION_STATS\", \"COLLECTION_INFO\"],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.log(\"üîÑ Validating Stargaze configuration...\");\n        try {\n            const config = await validateStargazeConfig(runtime);\n            debugLog.validation(config);\n            return true;\n        } catch (error) {\n            debugLog.error(error);\n            return false;\n        }\n    },\n    description: \"Get detailed statistics for a Stargaze collection\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"üöÄ Starting Stargaze GET_COLLECTION_STATS handler...\");\n\n        if (!state) {\n            elizaLogger.log(\"Creating new state...\");\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            elizaLogger.log(\"Updating existing state...\");\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        try {\n            elizaLogger.log(\"Composing collection stats context...\");\n            const statsContext = composeContext({\n                state,\n                template: getCollectionStatsTemplate,\n            });\n\n            elizaLogger.log(\"Generating content from context...\");\n            const content = (await generateObjectDeprecated({\n                runtime,\n                context: statsContext,\n                modelClass: ModelClass.LARGE,\n            })) as unknown as GetCollectionStatsContent;\n\n            if (!content || !content.collectionAddr) {\n                throw new Error(\"Invalid or missing collection address in parsed content\");\n            }\n\n            debugLog.validation(content);\n\n            const config = await validateStargazeConfig(runtime);\n            \n            const requestData = {\n                query: COLLECTION_STATS_QUERY,\n                variables: {\n                    collectionAddr: content.collectionAddr,\n                },\n            };\n\n            debugLog.request('POST', config.STARGAZE_ENDPOINT, requestData);\n\n            const response = await axios.post(\n                config.STARGAZE_ENDPOINT,\n                requestData,\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                    }\n                }\n            );\n\n            debugLog.response(response);\n\n            const stats = response.data?.data?.collection?.stats;\n            const name = response.data?.data?.collection?.name;\n\n            if (!stats) {\n                throw new Error(\"No stats found for collection\");\n            }\n\n            // Format numerical values\n            const formatValue = (value: number) => \n                value ? Number(value).toLocaleString(undefined, { \n                    maximumFractionDigits: 2 \n                }) : '0';\n\n            // Format percentage values\n            const formatPercent = (value: number) => \n                value ? `${Number(value).toFixed(2)}%` : '0%';\n\n            if (callback) {\n                const message = {\n                    text: `Collection Stats for ${name} (${content.collectionAddr}):\n- Total Volume: ${formatValue(stats.volumeUsdTotal)} USD\n- 24h Volume: ${formatValue(stats.volumeUsd24hour)} USD\n- Total Sales: ${formatValue(stats.salesCountTotal)}\n- Unique Owners: ${formatValue(stats.numOwners)}\n- Owner Ratio: ${formatPercent(stats.uniqueOwnerPercent)}\n- Minted: ${formatPercent(stats.tokensMintedPercent)}\n- 24h Change: ${formatPercent(stats.change24HourPercent)}\n- 24h Mints: ${formatValue(stats.mintCount24hour)}\n- Market Cap: ${formatValue(stats.marketCap)} USD`,\n                    content: stats,\n                };\n                elizaLogger.log(\"‚úÖ Sending callback with collection stats:\", message);\n                callback(message);\n            }\n\n            return true;\n        } catch (error) {\n            debugLog.error(error);\n            if (callback) {\n                callback({\n                    text: `Error fetching collection stats: ${error}`,\n                    content: { error: error },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [[\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Show me stats for collection ammelia\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the stats for collection ammelia...\",\n                action: \"GET_COLLECTION_STATS\",\n            },\n        },\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Show me stats for collection {collection address}\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the stats for collection {collection address}...\",\n                action: \"GET_COLLECTION_STATS\",\n            },\n        },\n    ]],\n} as Action;","import {\n    ActionExample,\n    composeContext,\n    Content,\n    elizaLogger,\n    generateObjectDeprecated,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    type Action,\n} from \"@elizaos/core\";\nimport axios from \"axios\";\nimport { debugLog } from \"../utils/debug\";\nimport { validateStargazeConfig } from \"../environment\";\nimport { TokenSale, TokenSalesResponse } from \"../types\";\n\nconst getTokenSalesTemplate = `Given the message, extract the collection address for fetching Stargaze sales data.\n\nFormat the response as a JSON object with these fields:\n- collectionAddr: the collection address or name (required)\n- limit: number of sales to fetch (default to 5)\n\nExample response:\n\\`\\`\\`json\n{\n    \"collectionAddr\": \"ammelia\",\n    \"limit\": 5\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the collection information from the above messages and respond with the appropriate JSON.`;\n\nexport const TOKEN_SALES_QUERY = `\nquery TokenSales($collectionAddr: String!, $limit: Int) {\n    tokenSales(\n        filterByCollectionAddrs: [$collectionAddr]\n        limit: $limit\n        sortBy: USD_PRICE_DESC\n    ) {\n        tokenSales {\n            id\n            token {\n                tokenId\n                name\n                media {\n                    url\n                }\n            }\n            price\n            priceUsd\n            date\n            saleDenomSymbol\n            saleType\n            buyer {\n                address\n            }\n            seller {\n                address\n            }\n        }\n    }\n}`;\n\nexport interface GetTokenSalesContent extends Content {\n    collectionAddr: string;\n    limit: number;\n}\n\nexport default {\n    name: \"GET_TOKEN_SALES\",\n    similes: [\"CHECK_SALES\", \"RECENT_SALES\"],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.log(\"üîÑ Validating Stargaze configuration...\");\n        try {\n            const config = await validateStargazeConfig(runtime);\n            debugLog.validation(config);\n            return true;\n        } catch (error) {\n            debugLog.error(error);\n            return false;\n        }\n    },\n    description: \"Get recent sales data for a Stargaze collection\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"üöÄ Starting Stargaze GET_TOKEN_SALES handler...\");\n\n        if (!state) {\n            elizaLogger.log(\"Creating new state...\");\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            elizaLogger.log(\"Updating existing state...\");\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        try {\n            elizaLogger.log(\"Composing sales context...\");\n            const salesContext = composeContext({\n                state,\n                template: getTokenSalesTemplate,\n            });\n\n            elizaLogger.log(\"Generating content from context...\");\n            const content = (await generateObjectDeprecated({\n                runtime,\n                context: salesContext,\n                modelClass: ModelClass.LARGE,\n            })) as unknown as GetTokenSalesContent;\n\n            if (!content || !content.collectionAddr) {\n                throw new Error(\"Invalid or missing collection address in parsed content\");\n            }\n\n            debugLog.validation(content);\n\n            const config = await validateStargazeConfig(runtime);\n\n            const requestData = {\n                query: TOKEN_SALES_QUERY,\n                variables: {\n                    collectionAddr: content.collectionAddr,\n                    limit: content.limit || 5,\n                },\n            };\n\n            debugLog.request('POST', config.STARGAZE_ENDPOINT, requestData);\n\n            const response = await axios.post<TokenSalesResponse>(\n                config.STARGAZE_ENDPOINT,\n                requestData,\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                    }\n                }\n            );\n\n            debugLog.response(response);\n\n            const sales = response.data?.data?.tokenSales?.tokenSales;\n            if (!sales?.length) {\n                throw new Error(\"No sales found for collection\");\n            }\n\n            // Format numeric values\n            const formatPrice = (price: number, symbol: string) =>\n                `${Number(price).toLocaleString(undefined, {\n                    maximumFractionDigits: 2\n                })} ${symbol}`;\n\n            // Format date to local string\n            const formatDate = (dateStr: string) => {\n                try {\n                    return new Date(dateStr).toLocaleString();\n                } catch (e) {\n                    return dateStr;\n                }\n            };\n\n            if (callback) {\n                const salesText = sales.map((sale: TokenSale) =>\n                    `‚Ä¢ ${sale.token.name} (ID: ${sale.token.tokenId})\n    Price: ${formatPrice(sale.price, sale.saleDenomSymbol)} ($${sale.priceUsd.toFixed(2)})\n    Date: ${formatDate(sale.date)}\n    Type: ${sale.saleType}\n    Seller: ${sale.seller.address}\n    Buyer: ${sale.buyer.address}`\n                ).join('\\n\\n');\n\n                callback({\n                    text: `Recent sales for ${content.collectionAddr}:\\n\\n${salesText}`,\n                    content: {\n                        collection: content.collectionAddr,\n                        sales: sales\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            debugLog.error(error);\n            if (callback) {\n                callback({\n                    text: `Error fetching sales data: ${error instanceof Error ? error.message : 'Unknown error'}`,\n                    content: { error: error instanceof Error ? error.message : 'Unknown error' },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [[\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Show me recent sales from collection ammelia\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the recent sales for the ammelia collection...\",\n                action: \"GET_TOKEN_SALES\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Here are the recent sales data for ammelia collection:\\n‚Ä¢ NFT #123 - Sold for 100 STARS ($5.20)\\n‚Ä¢ NFT #124 - Sold for 95 STARS ($4.95)\",\n            },\n        }\n    ]],\n} as Action;","import { Plugin } from \"@elizaos/core\";\nimport getLatestNFT from \"./actions/getLatestNFT\";\nimport getCollectionStats from \"./actions/getCollectionStats\";\nimport getTokenSales from \"./actions/getTokenSales\";\n\nexport const stargazePlugin: Plugin = {\n    name: \"stargaze\",\n    description: \"Stargaze NFT Plugin for Eliza\",\n    actions: [\n        getLatestNFT,\n        getCollectionStats,\n        getTokenSales\n    ],\n    evaluators: [],\n    providers: [],\n};\n\nexport default stargazePlugin;"],"mappings":"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","names":["elizaLogger","elizaLogger","message","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","axios","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","axios","message","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","axios","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","axios"]}